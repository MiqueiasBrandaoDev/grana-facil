import OpenAI from 'openai';
import { supabase } from '@/integrations/supabase/client';
import { getCurrentUser } from '@/lib/auth';

const openai = new OpenAI({
  apiKey: import.meta.env.VITE_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true
});

export interface AIAgentResponse {
  success: boolean;
  message: string;
  actions: AIAction[];
  data?: any;
  confidence: number;
  reasoning: string;
  needsClarification?: boolean;
  clarificationQuestion?: string;
}

export interface AIAction {
  type: 'create_transaction' | 'create_category' | 'create_goal' | 'update_goal' | 'create_bill' | 'update_bill' | 'delete_bill' | 'update_budget' | 'pay_bill' | 'list_bills' | 'investment_suggestion' | 'financial_advice' | 'create_card' | 'create_card_purchase' | 'pay_card_invoice' | 'list_cards' | 'view_card_history';
  data: any;
  priority: 'high' | 'medium' | 'low';
  executed: boolean;
}

export interface UserContext {
  userId: string;
  currentBalance: number;
  monthlyIncome: number;
  monthlyExpenses: number;
  categories: any[];
  recentTransactions: any[];
  goals: any[];
  bills: any[];
  cards: any[];
}

/**
 * ü§ñ AGENTE IA FINANCEIRO INTELIGENTE
 * Processa linguagem natural e executa a√ß√µes financeiras complexas
 */
export class AIFinancialAgent {
  private openai: OpenAI;
  private userContext: UserContext | null = null;
  private conversationHistory: Array<{message: string, timestamp: Date}> = [];

  constructor() {
    this.openai = openai;
  }

  /**
   * üß† Adicionar mensagem ao hist√≥rico de conversa
   */
  private addToHistory(message: string, isUser: boolean = true) {
    this.conversationHistory.push({
      message: `${isUser ? 'USU√ÅRIO' : 'IA'}: ${message}`,
      timestamp: new Date()
    });
    
    // Manter apenas as √∫ltimas 10 mensagens para melhor contexto
    if (this.conversationHistory.length > 10) {
      this.conversationHistory = this.conversationHistory.slice(-10);
    }
  }

  /**
   * üß† Processar comando em linguagem natural
   */
  async processCommand(message: string): Promise<AIAgentResponse> {
    try {
      console.log('ü§ñ Processando comando:', message);
      
      // 1. Adicionar mensagem do usu√°rio ao hist√≥rico
      this.addToHistory(message, true);

      // 2. Carregar contexto do usu√°rio
      await this.loadUserContext();
      
      if (!this.userContext) {
        console.log('‚ùå Usu√°rio n√£o autenticado');
        return {
          success: false,
          message: "‚ùå Erro: Usu√°rio n√£o autenticado",
          actions: [],
          confidence: 0,
          reasoning: "Contexto do usu√°rio n√£o dispon√≠vel"
        };
      }

      console.log('üë§ Contexto do usu√°rio carregado:', {
        userId: this.userContext.userId,
        categoriesCount: this.userContext.categories.length
      });

      // 3. Analisar inten√ß√£o com GPT-4o (incluindo hist√≥rico)
      console.log('üß† Analisando inten√ß√£o com GPT-4o...');
      const analysis = await this.analyzeIntent(message);
      console.log('üìã An√°lise completa:', analysis);
      
      // 3.0. VERIFICAR FALLBACKS PRIMEIRO (antes de verificar esclarecimento)
      const messageNormalized = message.toLowerCase().trim();
      
      // 3.1. FOR√áAR list_bills para consultas de contas
      const isContasQuery = 
        messageNormalized.includes('quais contas') ||
        messageNormalized.includes('que contas') ||
        messageNormalized.includes('minhas contas') ||
        messageNormalized.includes('contas pendentes') ||
        messageNormalized.includes('contas que tenho') ||
        messageNormalized.includes('contas n√£o pagas') ||
        messageNormalized.includes('contas em aberto');
        
      if (isContasQuery && (!analysis.actions || analysis.actions.length === 0)) {
        console.log('üîß FOR√áANDO list_bills para consulta de contas');
        analysis.actions = [{
          type: 'list_bills',
          data: {},
          priority: 'high'
        }];
        analysis.intent = 'bill';
      }
      
      // 3.2. FOR√áAR list_cards para consultas de cart√µes
      const hasCartao = messageNormalized.includes('cart√£o') || messageNormalized.includes('cartoes') || messageNormalized.includes('cart√µes');
      const hasQueryWord = messageNormalized.includes('quais') || messageNormalized.includes('que') || messageNormalized.includes('meus') || messageNormalized.includes('tenho') || messageNormalized.includes('lista');
      
      const isCartoesQuery = hasCartao && hasQueryWord;
        
      if (isCartoesQuery && (!analysis.actions || analysis.actions.length === 0)) {
        console.log('üîß FOR√áANDO list_cards para consulta de cart√µes');
        console.log('üîß Mensagem detectada como consulta de cart√µes:', messageNormalized);
        analysis.actions = [{
          type: 'list_cards',
          data: {},
          priority: 'high'
        }];
        analysis.intent = 'card';
        analysis.response_message = "Listando seus cart√µes de cr√©dito...";
      }
      
      // 3.3. FOR√áAR create_card para cria√ß√£o de cart√µes
      const hasCreateCartao = (messageNormalized.includes('criar') || messageNormalized.includes('novo') || messageNormalized.includes('cadastrar')) && hasCartao;
      
      if (hasCreateCartao && (!analysis.actions || analysis.actions.length === 0)) {
        console.log('üîß FOR√áANDO create_card para cria√ß√£o de cart√£o');
        console.log('üîß Mensagem detectada como cria√ß√£o de cart√£o:', messageNormalized);
        
        // Extrair informa√ß√µes b√°sicas de forma mais inteligente
        // 1. Buscar nickname (palavra pr√≥xima a "cart√£o" que n√£o seja comando)
        let nickname = 'Cart√£o';
        const cartaoWords = messageNormalized.split(/\s+/);
        const cartaoIndex = cartaoWords.findIndex(word => word.includes('cart√£o') || word.includes('cartao'));
        
        if (cartaoIndex !== -1) {
          // Procurar uma palavra antes ou depois de "cart√£o"
          for (let i = cartaoIndex - 1; i <= cartaoIndex + 1; i++) {
            if (i >= 0 && i < cartaoWords.length && i !== cartaoIndex) {
              const word = cartaoWords[i].replace(/[,\.;]/g, ''); // Remove pontua√ß√£o
              if (word && !['criar', 'novo', 'cart√£o', 'cartao', 'limite', 'dia', 'de', 'com', 'vence'].includes(word) && !/\d/.test(word)) {
                nickname = word;
                break;
              }
            }
          }
        }
        
        // 2. Buscar limite (n√∫mero seguido de "mil", "k" ou no contexto de "limite")
        let limitAmount = null;
        const limitMatch = messageNormalized.match(/(\d+)\s*(?:mil|k)/i) || messageNormalized.match(/limite\s+(?:de\s+)?(\d+(?:\.\d+)?)/i);
        if (limitMatch) {
          let limitValue = parseFloat(limitMatch[1]);
          if (messageNormalized.includes('mil') || messageNormalized.includes('k')) {
            limitAmount = limitValue * 1000;
          } else {
            limitAmount = limitValue;
          }
        }
        
        // 3. Buscar dia de vencimento (n√∫mero isolado que n√£o seja do limite)
        let dueDay = null;
        const dayMatch = messageNormalized.match(/(?:dia\s+|vence\s+(?:dia\s+)?)(\d{1,2})(?!\s*mil)/i);
        if (dayMatch) {
          const day = parseInt(dayMatch[1]);
          // S√≥ aceitar se for um dia v√°lido e n√£o parte do limite
          if (day >= 1 && day <= 31 && !limitMatch?.[0]?.includes(dayMatch[1])) {
            dueDay = day;
          }
        }
        
        console.log('üîß Dados extra√≠dos:', { nickname, limitAmount, dueDay, limitMatch, dayMatch });
        
        // Se tem todas as informa√ß√µes, criar diretamente
        if (nickname && dueDay && dueDay >= 1 && dueDay <= 31) {
          analysis.actions = [{
            type: 'create_card',
            data: {},
            priority: 'high'
          }];
          analysis.extracted_data = {
            ...analysis.extracted_data,
            nickname: nickname,
            due_day: dueDay,
            limit_amount: limitAmount
          };
          analysis.intent = 'card';
          analysis.needsClarification = false;
        } else {
          // Precisa de mais informa√ß√µes - s√≥ perguntar o que realmente falta
          if (!dueDay) {
            analysis.needsClarification = true;
            analysis.clarificationQuestion = `üí≥ Para criar o cart√£o ${nickname}, qual o dia de vencimento? (1-31)${limitAmount ? `\nüí∞ Limite ser√°: R$ ${limitAmount.toFixed(2)}` : ''}`;
          } else {
            // Se tem nickname e dia, pode criar mesmo sem limite
            analysis.actions = [{
              type: 'create_card',
              data: {},
              priority: 'high'
            }];
            analysis.extracted_data = {
              ...analysis.extracted_data,
              nickname: nickname,
              due_day: dueDay,
              limit_amount: limitAmount
            };
            analysis.intent = 'card';
            analysis.needsClarification = false;
          }
        }
      }
      
      // Debug: Log final das a√ß√µes
      console.log('üîç A√ß√µes finais ap√≥s fallbacks:', analysis.actions);
      
      // 3.4. Detectar comandos de cart√£o sem especifica√ß√£o e for√ßar fallbacks
      const isCardPurchaseQuery = 
        (messageNormalized.includes('comprei') || messageNormalized.includes('compra') || messageNormalized.includes('gasto') || messageNormalized.includes('usei') || messageNormalized.includes('paguei')) &&
        (messageNormalized.includes('cart√£o') || messageNormalized.includes('cartao') || messageNormalized.includes('credito'));
        
      const isCardPaymentQuery = 
        (messageNormalized.includes('pagar') || messageNormalized.includes('quitar')) &&
        (messageNormalized.includes('fatura') || messageNormalized.includes('cart√£o') || messageNormalized.includes('cartao'));
        
      // 3.5. Detectar comandos espec√≠ficos de compra no cart√£o com nome
      const specificCardPurchaseQuery = messageNormalized.match(/(?:comprei|compra|gasto|usei|paguei).*?(?:no\s+cart√£o|cart√£o|credito)/i);
      
      if (specificCardPurchaseQuery && (!analysis.actions || analysis.actions.length === 0)) {
        console.log('üîß Detectado compra espec√≠fica no cart√£o:', specificCardPurchaseQuery[0]);
        
        // Extrair valor
        const numberMatch = messageNormalized.match(/(\d+(?:,\d+)?(?:\.\d+)?)/);
        const amount = numberMatch ? parseFloat(numberMatch[1].replace(',', '.')) : null;
        
        // Extrair nome do cart√£o se especificado
        const cardNameMatch = messageNormalized.match(/(?:cart√£o|credito)\s+(\w+)/i) || messageNormalized.match(/(\w+)\s+cart√£o/i);
        let cardName = null;
        
        if (cardNameMatch && cardNameMatch[1]) {
          cardName = cardNameMatch[1];
        } else if (this.userContext?.cards && this.userContext.cards.length > 0) {
          cardName = this.userContext.cards[0].nickname;
        }
        
        if (amount && amount > 0 && cardName) {
          // Extrair descri√ß√£o
          let description = 'Compra no cart√£o';
          const descMatch = messageNormalized.match(/(?:comprei|compra|gasto)\s+(?:\d+\s*)?(?:reais?\s+)?(?:de\s+|no\s+|para\s+)?(\w+(?:\s+\w+)*?)(?:\s+(?:no|com|cart√£o))/i);
          if (descMatch && descMatch[1]) {
            description = descMatch[1].trim();
          }
          
          analysis.actions = [{
            type: 'create_card_purchase',
            data: {},
            priority: 'high'
          }];
          analysis.extracted_data = {
            ...analysis.extracted_data,
            card_name: cardName,
            amount: amount,
            description: description
          };
          analysis.intent = 'card';
          analysis.needsClarification = false;
          
          console.log('üîß Dados espec√≠ficos para criar compra:', analysis.extracted_data);
        }
      }
        
      // Detectar se √© comando de cart√£o mas sem especifica√ß√µes suficientes
      if ((isCardPurchaseQuery || isCardPaymentQuery) && (!analysis.actions || analysis.actions.length === 0)) {
        console.log('üîß Detectado comando de cart√£o gen√©rico, aplicando fallback');
        
        if (isCardPurchaseQuery) {
          console.log('üîß Detectado compra no cart√£o');
          console.log('üîß UserContext cards:', this.userContext?.cards?.length || 0);
          
          // Extrair valor e descri√ß√£o se poss√≠vel
          const numberMatch = messageNormalized.match(/(\d+(?:,\d+)?(?:\.\d+)?)/);
          const amount = numberMatch ? parseFloat(numberMatch[1].replace(',', '.')) : null;
          
          console.log('üîß Valor extra√≠do:', amount);
          
          // Se h√° contexto de cart√µes, tentar usar o primeiro
          if (this.userContext?.cards && this.userContext.cards.length > 0) {
            if (amount && amount > 0) {
              const cardName = this.userContext.cards[0].nickname;
              console.log(`üîß FALLBACK: Usando cart√£o "${cardName}" para compra de R$ ${amount}`);
              
              // Extrair descri√ß√£o mais inteligente
              let description = 'Compra no cart√£o';
              if (messageNormalized.includes('combustivel') || messageNormalized.includes('gasolina') || messageNormalized.includes('etanol')) {
                description = 'Combust√≠vel';
              } else if (messageNormalized.includes('mercado') || messageNormalized.includes('supermercado')) {
                description = 'Compras no mercado';
              } else if (messageNormalized.includes('roupa') || messageNormalized.includes('vestuario')) {
                description = 'Roupas';
              } else if (messageNormalized.includes('comida') || messageNormalized.includes('alimenta√ß√£o') || messageNormalized.includes('alimento')) {
                description = 'Alimenta√ß√£o';
              } else if (messageNormalized.includes('farmacia') || messageNormalized.includes('remedio')) {
                description = 'Farm√°cia';
              } else {
                // Tentar extrair descri√ß√£o da mensagem
                const descMatch = messageNormalized.match(/(?:comprei|compra|gasto)(?:\s+(?:r\$|\d+))?\s*(?:reais?)?\s*(?:de|no|para|com)?\s*(\w+(?:\s+\w+)*)/i);
                if (descMatch && descMatch[1]) {
                  description = descMatch[1].trim();
                }
              }
              
              analysis.actions = [{
                type: 'create_card_purchase',
                data: {},
                priority: 'high'
              }];
              analysis.extracted_data = {
                ...analysis.extracted_data,
                card_name: cardName,
                amount: amount,
                description: description
              };
              analysis.intent = 'card';
              analysis.needsClarification = false;
              
              console.log('üîß Dados finais para criar compra:', analysis.extracted_data);
            } else {
              // Se n√£o tem valor, pedir esclarecimento
              analysis.needsClarification = true;
              analysis.clarificationQuestion = "üõçÔ∏è Para registrar a compra no cart√£o, preciso saber:\nüí∞ Qual foi o valor?\nüìù O que voc√™ comprou?\n\nExemplo: 'comprei 50 reais de combust√≠vel no cart√£o'";
            }
          } else {
            // Se n√£o tem cart√µes, sugerir criar um primeiro
            analysis.needsClarification = true;
            analysis.clarificationQuestion = "üí≥ Voc√™ ainda n√£o possui cart√µes cadastrados. Quer criar um cart√£o primeiro?\n\nExemplo: 'criar cart√£o Nubank dia 10'";
          }
        } else if (isCardPaymentQuery) {
          // Para pagamento, sempre pode usar o primeiro cart√£o se houver
          if (this.userContext?.cards && this.userContext.cards.length > 0) {
            const cardName = this.userContext.cards[0].nickname;
            console.log(`üîß FALLBACK: Pagando fatura do cart√£o "${cardName}"`);
            
            analysis.actions = [{
              type: 'pay_card_invoice',
              data: {},
              priority: 'high'
            }];
            analysis.extracted_data = {
              ...analysis.extracted_data,
              card_name: cardName
            };
            analysis.intent = 'card';
          }
        }
      }
      
      // 4. Verificar se precisa de esclarecimento (MAS AP√ìS FALLBACKS!)
      if (analysis.needsClarification && (!analysis.actions || analysis.actions.length === 0)) {
        return {
          success: false,
          message: analysis.clarificationQuestion || "ü§î Preciso de mais informa√ß√µes para te ajudar melhor.",
          actions: [],
          confidence: analysis.confidence || 0.3,
          reasoning: analysis.reasoning || "Comando amb√≠guo",
          needsClarification: true,
          clarificationQuestion: analysis.clarificationQuestion
        };
      }
      
      // 5. Executar a√ß√µes baseadas na an√°lise
      const result = await this.executeActions(analysis);
      
      // 6. Adicionar resposta da IA ao hist√≥rico
      this.addToHistory(result.message, false);
      
      return result;

    } catch (error) {
      console.error('Erro no agente IA:', error);
      return {
        success: false,
        message: `‚ùå Erro interno da Grana IA.\n\nüîß Detalhes t√©cnicos: ${error instanceof Error ? error.message : 'Erro desconhecido'}\n\nüí° Tente reformular sua pergunta ou contate o suporte.`,
        actions: [],
        confidence: 0,
        reasoning: "Erro de processamento interno"
      };
    }
  }

  /**
   * üìä Carregar contexto completo do usu√°rio
   */
  private async loadUserContext(): Promise<void> {
    const user = await getCurrentUser();
    if (!user) return;

    // Buscar dados paralelos para otimizar performance
    const [
      balanceResult,
      categoriesResult,
      transactionsResult,
      goalsResult,
      billsResult,
      cardsResult
    ] = await Promise.all([
      supabase.rpc('get_user_balance', { input_user_id: user.id }),
      supabase.from('categories').select('*').eq('user_id', user.id),
      supabase.from('transactions_with_category').select('*').eq('user_id', user.id).order('created_at', { ascending: false }).limit(20),
      supabase.from('goal_progress').select('*').eq('user_id', user.id),
      supabase.from('bills').select('*').eq('user_id', user.id).order('due_date', { ascending: true }),
      supabase.from('card_spending_summary').select('*').eq('user_id', user.id).order('created_at', { ascending: false })
    ]);

    // Calcular receitas e despesas do m√™s
    const currentMonth = new Date().toISOString().slice(0, 7);
    const monthlyTransactions = transactionsResult.data?.filter(t => 
      t.transaction_date.startsWith(currentMonth)
    ) || [];

    const monthlyIncome = monthlyTransactions
      .filter(t => t.type === 'income')
      .reduce((sum, t) => sum + t.amount, 0);

    const monthlyExpenses = monthlyTransactions
      .filter(t => t.type === 'expense')
      .reduce((sum, t) => sum + Math.abs(t.amount), 0);

    this.userContext = {
      userId: user.id,
      currentBalance: balanceResult.data || 0,
      monthlyIncome,
      monthlyExpenses,
      categories: categoriesResult.data || [],
      recentTransactions: transactionsResult.data || [],
      goals: goalsResult.data || [],
      bills: billsResult.data || [],
      cards: cardsResult.data || []
    };
  }

  /**
   * üîç Analisar inten√ß√£o do usu√°rio com GPT-4o
   */
  private async analyzeIntent(message: string): Promise<any> {
    const prompt = this.buildAnalysisPrompt(message);

    const completion = await this.openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: `Voc√™ √© o assistente financeiro IA mais avan√ßado do Brasil. Seu nome √© "Grana IA". 

CAPACIDADES:
- Processar transa√ß√µes em linguagem natural
- Criar categorias inteligentemente
- Sugerir e criar metas financeiras
- Analisar padr√µes de gastos
- Dar conselhos financeiros personalizados
- Gerenciar contas a pagar/receber
- Gerenciar cart√µes de cr√©dito e compras
- Sugerir investimentos

SEMPRE retorne um JSON v√°lido com a estrutura exata especificada.`
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.1,
      max_tokens: 2000,
      response_format: { type: "json_object" }
    });

    const response = completion.choices[0]?.message?.content;
    if (!response) throw new Error('Resposta vazia do GPT-4o');

    return JSON.parse(response);
  }

  /**
   * üìù Construir prompt de an√°lise contextual
   */
  private buildAnalysisPrompt(message: string): string {
    const context = this.userContext!;
    
    // Hist√≥rico das √∫ltimas mensagens para contexto
    const historyText = this.conversationHistory.length > 0 
      ? this.conversationHistory.map((h, i) => `${i + 1}. ${h.message}`).join('\n')
      : 'Nenhuma conversa anterior';
    
    return `
CONTEXTO FINANCEIRO DO USU√ÅRIO:
- Saldo atual: R$ ${context.currentBalance.toFixed(2)}
- Receitas m√™s: R$ ${context.monthlyIncome.toFixed(2)}
- Despesas m√™s: R$ ${context.monthlyExpenses.toFixed(2)}
- Categorias dispon√≠veis: ${context.categories.map(c => `${c.name} (${c.type})`).join(', ')}
- √öltimas transa√ß√µes: ${context.recentTransactions.slice(0, 5).map(t => `${t.description} - R$ ${Math.abs(t.amount)}`).join(', ')}
- Metas ativas: ${context.goals.map(g => `${g.title} (${g.progress_percentage}%)`).join(', ')}
- Contas pendentes: ${context.bills.map(b => `${b.title} - R$ ${b.amount}`).join(', ')}
- Cart√µes de cr√©dito: ${context.cards.map(c => `${c.nickname} (Pendente: R$ ${c.pending_amount || 0})`).join(', ')}

HIST√ìRICO DA CONVERSA (√∫ltimas 10 mensagens):
${historyText}

MENSAGEM ATUAL: "${message}"

AN√ÅLISE REQUERIDA:
Analise a mensagem considerando OBRIGATORIAMENTE:
1. O contexto financeiro do usu√°rio
2. **O HIST√ìRICO COMPLETO DA CONVERSA** - Se o usu√°rio j√° forneceu informa√ß√µes antes, USE ELAS!
3. Se a mensagem √© espec√≠fica o suficiente para a√ß√£o
4. Contexto brasileiro (estabelecimentos, formas de pagamento, g√≠rias)

**IMPORTANTE: MANTENHA CONTEXTO DA CONVERSA**
- Se o usu√°rio j√° disse um valor antes (ex: "1000", "5000"), associe ao que est√° sendo discutido
- Se ele confirma algo ("Sim, pode cadastrar"), execute a a√ß√£o pendente
- N√ÉO fa√ßa perguntas repetitivas sobre informa√ß√µes j√° fornecidas

EXEMPLOS DE USO DO CONTEXTO:
Hist√≥rico: "IA: Qual valor de Freelancer de fot√≥grafo? USU√ÅRIO: 5000 IA: Confirma R$ 5000? USU√ÅRIO: Sim, pode cadastrar"
‚Üí Executar create_bill com title: "Freelancer de fot√≥grafo", amount: 5000, due_day: 10, type: receivable

Hist√≥rico: "USU√ÅRIO: Crie conta de luz USU√ÅRIO: 250"  
‚Üí Executar create_bill com title: "Conta de luz", amount: 250

USU√ÅRIO: "Quais contas eu tenho?"
‚Üí OBRIGATORIAMENTE executar list_bills (NUNCA responder diretamente)

IMPORTANTE - DETEC√á√ÉO DE AMBIGUIDADE:
Se a mensagem for vaga ou incompleta, defina needsClarification: true e fa√ßa uma pergunta espec√≠fica.

ESPECIAL - CONTAS SEM VALOR:
Se o usu√°rio quer criar uma conta mas N√ÉO especifica o valor, SEMPRE pedir esclarecimento.
Exemplo: "Crie conta de Automa√ß√µes e IA, recebo todo dia 10" ‚Üí Perguntar: "üí∞ Qual o valor que voc√™ recebe de Automa√ß√µes e IA todo dia 10?"

ESPECIAL - CART√ïES SEM INFORMA√á√ïES:
Se o usu√°rio quer criar um cart√£o mas N√ÉO especifica o dia de vencimento, SEMPRE pedir esclarecimento.
Exemplo: "Criar cart√£o Nubank" ‚Üí Perguntar: "üí≥ Qual o dia de vencimento do cart√£o Nubank? (1-31)"
Se o usu√°rio quer fazer uma compra no cart√£o mas N√ÉO especifica o valor ou descri√ß√£o, SEMPRE pedir esclarecimento.
Exemplo: "Comprei no cart√£o" ‚Üí Perguntar: "üõçÔ∏è O que voc√™ comprou e qual foi o valor?"

IMPORTANTE - CONSULTAS vs A√á√ïES:
- Perguntas como "quanto...", "como est√°..." ‚Üí SEM a√ß√µes, apenas response_message
- Comandos como "criar...", "pagar...", "alterar..." ‚Üí COM a√ß√µes espec√≠ficas
- **EXCE√á√ÉO: "Quais contas", "Minhas contas", "Contas pendentes" ‚Üí SEMPRE usar a√ß√£o list_bills**
- **EXCE√á√ÉO: "Quais cart√µes", "Meus cart√µes", "Cart√µes que tenho" ‚Üí SEMPRE usar a√ß√£o list_cards**

IMPORTANTE - TIPOS DE A√á√ÉO:
- "Gastei X reais", "Comprei X" ‚Üí create_transaction (nova transa√ß√£o)
- "Pagar conta X", "Quitar conta" ‚Üí pay_bill (marcar conta existente como paga)
- "Criar categoria X" ‚Üí create_category (tipo de despesa/receita)
- "Criar conta X", "Cadastrar conta", "Nova conta que pago todo m√™s" ‚Üí create_bill (conta a pagar/receber)
- **"Alterar nome da conta X para Y", "Renomear conta X", "Mudar nome para Y" ‚Üí update_bill**
- **"Excluir conta X", "Deletar conta X", "Remover conta X" ‚Üí delete_bill**
- "Criar meta X" ‚Üí create_goal
- "Alterar meta", "Colocar X na meta" ‚Üí update_goal
- **"Quais contas", "Que contas tenho", "Contas pendentes", "Minhas contas" ‚Üí list_bills (OBRIGAT√ìRIO)**
- "Criar cart√£o X", "Novo cart√£o" ‚Üí create_card
- "Comprei X no cart√£o", "Usei cart√£o", "Gasto no cart√£o" ‚Üí create_card_purchase
- "Pagar fatura do cart√£o", "Quitar cart√£o" ‚Üí pay_card_invoice
- **"Quais cart√µes tenho", "Meus cart√µes", "Que cart√µes eu tenho", "Cart√µes que tenho" ‚Üí list_cards (OBRIGAT√ìRIO)**
- "Hist√≥rico do cart√£o", "Compras do cart√£o" ‚Üí view_card_history

IMPORTANTE - CAMPOS DE META:
- target_amount = OBJETIVO da meta (quanto quero chegar)
- current_amount = PROGRESSO atual (quanto j√° tenho)
- "Colocar 10000 na meta" = alterar OBJETIVO (target_amount)
- "J√° consegui 500" = alterar PROGRESSO (current_amount)

DIFEREN√áA IMPORTANTE:
- CATEGORIA = tipo de gasto (Alimenta√ß√£o, Transporte, etc.)
- CONTA = obriga√ß√£o financeira espec√≠fica (Conta de luz, Aluguel, etc.)

Exemplos de mensagens que PRECISAM de esclarecimento:
- "criar categoria" (qual categoria? para que tipo?)
- "criar categoria jogos" (√© despesa ou receita?)
- "gastei dinheiro" (quanto? onde? categoria?)
- "quero economizar" (quanto? para que? em quanto tempo?)
- "pagar conta" (qual conta? valor?)
- "criar conta de luz" (quanto? quando vence?)
- "recebo todo dia 10" (quanto? de onde? que conta?)
- "colocar X na meta" (√© aporte no progresso ou mudan√ßa do objetivo?)

REGRAS PARA CRIA√á√ÉO DE CATEGORIAS:
1. Se o usu√°rio ESPECIFICA claramente o tipo: "criar categoria X para despesas" ou "categoria Y de receita" ‚Üí N√ÉO pedir esclarecimento, criar diretamente
2. Se menciona palavras expl√≠citas como "gastos", "despesas", "custos" ‚Üí tipo "expense" 
3. Se menciona palavras como "receitas", "ganhos", "rendas" ‚Üí tipo "income"
4. Se o usu√°rio menciona apenas o nome da categoria SEM especificar o tipo, verificar se √© √≥bvio:
   - "sal√°rio", "freelance", "venda", "vendas" ‚Üí receita (√≥bvio)
   - "aluguel", "conta de luz", "medicamentos", "gastos" ‚Üí despesa (√≥bvio)
5. Para categorias amb√≠guas como "jogos", "tecnologia", "casa" SEM contexto, sempre perguntar o tipo

RESPOSTA (JSON obrigat√≥rio):
{
  "intent": "transaction|goal|category|advice|report|bill|investment|card|clarification",
  "confidence": 0.95,
  "reasoning": "Explica√ß√£o detalhada da an√°lise",
  "needsClarification": false,
  "clarificationQuestion": "Pergunta espec√≠fica se precisar de esclarecimento",
  "extracted_data": {
    "amount": 50.00,
    "description": "Compras no mercado",
    "category": "Alimenta√ß√£o",
    "name": "Nome da categoria OU conta",
    "title": "T√≠tulo da meta OU conta (OBRIGAT√ìRIO para create_bill)",
    "type": "expense|income (para categorias) OU payable|receivable (para contas)",
    "bill_type": "payable|receivable (espec√≠fico para contas)",
    "payment_method": "pix",
    "location": "P√£o de A√ß√∫car",
    "target_amount": 5000.00,
    "current_amount": 1500.00,
    "aporte": 1000.00,
    "due_date": "2024-01-15 OU pr√≥ximo dia 10",
    "due_day": 10,
    "recurring": true,
    "recurring_interval": "monthly|weekly|daily|yearly",
    "pay_all": "true (para pagar todas as contas)",
    "nickname": "Nome do cart√£o (OBRIGAT√ìRIO para create_card)",
    "card_id": "ID do cart√£o espec√≠fico",
    "card_name": "Nome do cart√£o para busca",
    "limit_amount": 5000.00,
    "installments": 12,
    "purchase_date": "2024-01-15"
  },
  "actions": [
    {
      "type": "create_transaction|create_category|create_goal|update_goal|create_bill|update_bill|delete_bill|pay_bill|list_bills|create_card|create_card_purchase|pay_card_invoice|list_cards|view_card_history",
      "data": {},
      "priority": "high"
    }
  ],
  "suggestions": [
    "Sugest√£o 1",
    "Sugest√£o 2"
  ],
  "response_message": "Mensagem amig√°vel para o usu√°rio"
}

EXEMPLOS DE ESCLARECIMENTO PARA CATEGORIAS:
- "criar categoria jogos" ‚Üí needsClarification: true, clarificationQuestion: "üéÆ Perfeito! A categoria 'Jogos' ser√° para **despesas** (gastos com jogos, equipamentos, assinaturas) ou **receitas** (vendas de jogos, streaming de games)? üí∞"

- "criar categoria tecnologia" ‚Üí needsClarification: true, clarificationQuestion: "üíª √ìtima categoria! 'Tecnologia' ser√° para **despesas** (compras de equipamentos, softwares, assinaturas) ou **receitas** (freelances tech, vendas de produtos digitais)? ü§î"

- "criar categoria casa" ‚Üí needsClarification: true, clarificationQuestion: "üè† Categoria 'Casa' ser√° para **despesas** (manuten√ß√£o, m√≥veis, contas) ou **receitas** (aluguel recebido, vendas relacionadas)? üí°"

EXEMPLOS DE ESCLARECIMENTO PARA CONTAS SEM VALOR:
- "Crie conta recorrente, pagamentos de Automa√ß√µes e IA, recebo todo dia 10" ‚Üí needsClarification: true, clarificationQuestion: "üí∞ Perfeito! Qual o **valor** que voc√™ recebe de 'Pagamentos de Automa√ß√µes e IA' todo dia 10? Por exemplo: R$ 500, R$ 1000, etc."

- "Nova conta de luz que vence dia 15" ‚Üí needsClarification: true, clarificationQuestion: "üí° √ìtimo! Qual o **valor** da conta de luz? Por exemplo: R$ 200, R$ 150, etc."

EXEMPLOS DE ESCLARECIMENTO PARA CART√ïES:
- "Criar cart√£o Nubank" ‚Üí needsClarification: true, clarificationQuestion: "üí≥ Perfeito! Qual o **dia de vencimento** do cart√£o Nubank? Por exemplo: 10, 15, 25, etc. (entre 1 e 31)"

- "Novo cart√£o Inter com limite" ‚Üí needsClarification: true, clarificationQuestion: "üí≥ √ìtimo! Preciso de duas informa√ß√µes:\n1Ô∏è‚É£ **Dia de vencimento** (1-31)\n2Ô∏è‚É£ **Valor do limite** (opcional)\n\nExemplo: 'dia 15 com limite de 5000'"

- "Comprei no cart√£o" ‚Üí needsClarification: true, clarificationQuestion: "üõçÔ∏è Preciso de mais detalhes sobre a compra:\n1Ô∏è‚É£ **Qual cart√£o** voc√™ usou?\n2Ô∏è‚É£ **O que** voc√™ comprou?\n3Ô∏è‚É£ **Qual foi o valor**?\n\nExemplo: 'usei o Nubank para comprar roupas por 150 reais'"

EXEMPLOS DE ESCLARECIMENTO PARA METAS AMB√çGUAS:
- "Quero colocar 10000 na meta abrir empresa" ‚Üí needsClarification: true, clarificationQuestion: "üéØ Voc√™ quer:\n\nüí∞ **Fazer um aporte** de R$ 10.000 (adicionar ao progresso atual)?\n\nOU\n\nüéØ **Alterar o objetivo** da meta para R$ 10.000 (mudar a meta total)?"

- "Colocar 5000 na meta viagem" ‚Üí needsClarification: true, clarificationQuestion: "‚úàÔ∏è Voc√™ quer:\n\nüí∞ **Fazer um aporte** de R$ 5.000 (adicionar ao que j√° tem)?\n\nOU\n\nüéØ **Alterar o objetivo** da meta para R$ 5.000 (nova meta total)?"

EXEMPLOS DE TIPOS √ìBVIOS (n√£o precisam esclarecimento):
- "criar categoria sal√°rio" ‚Üí Receita (√≥bvio)
- "criar categoria freelance" ‚Üí Receita (√≥bvio)  
- "criar categoria aluguel pago" ‚Üí Despesa (√≥bvio)
- "criar categoria medicamentos" ‚Üí Despesa (√≥bvio)

EXEMPLOS DE A√á√ïES CLARAS:
- "Gastei 50 reais no P√£o de A√ß√∫car" ‚Üí Criar transa√ß√£o
- "Quero economizar 5000 reais em 6 meses para viagem" ‚Üí Criar meta espec√≠fica
- "Crie uma categoria chamada Pets para despesas com meu cachorro" ‚Üí Criar categoria despesa (tipo expl√≠cito)
- "Criar categoria Freelance para receitas" ‚Üí Criar categoria receita (tipo expl√≠cito)
- "Quero categoria Jogos para gastos" ‚Üí Criar categoria despesa (palavra "gastos")
- "Categoria Investimentos de receita" ‚Üí Criar categoria receita (tipo expl√≠cito)
- "Criar categoria Medicamentos" ‚Üí Criar categoria despesa (√≥bvio)
- "Criar categoria Sal√°rio" ‚Üí Criar categoria receita (√≥bvio)
- "Alterar meta para 5000" ‚Üí Atualizar target_amount da meta mais recente
- "Mudar objetivo da meta viagem para 8000" ‚Üí Atualizar target_amount da meta espec√≠fica  
- "Atualizar progresso da meta para 1500" ‚Üí Atualizar current_amount (quanto j√° tenho)
- "J√° consegui 500 da meta" ‚Üí Atualizar current_amount
- "Fazer aporte de 1000 na meta" ‚Üí Atualizar current_amount (adicionar ao progresso)
- "Alterar objetivo da meta para 15000" ‚Üí Atualizar target_amount (clara inten√ß√£o)
- "Quero colocar 10000 na meta" ‚Üí PEDIR ESCLARECIMENTO (amb√≠guo)
- "Quais minhas contas n√£o pagas?" ‚Üí OBRIGATORIAMENTE usar a√ß√£o list_bills
- "Pagar conta de luz" ‚Üí usar pay_bill, N√ÉO create_transaction
- "Quero pagar a conta asdsdasd" ‚Üí usar pay_bill com name: "asdsdasd"
- "Pagar todas as contas" ‚Üí usar pay_bill com pay_all: true
- "Quero criar nova conta, conta de luz, 250 reais, vence dia 10" ‚Üí create_bill
- **"Altere o nome dela para Camozzi Consultoria" ‚Üí update_bill com old_name: "Recebimento mensal", new_name: "Camozzi Consultoria"**
- **"Pode excluir a conta Recebimento mensal" ‚Üí delete_bill com name: "Recebimento mensal"**
- "Cadastrar conta de internet que pago todo m√™s" ‚Üí create_bill
- "Nova conta: aluguel de 1500 reais" ‚Üí create_bill
- "Criar cart√£o Nubank que vence dia 10" ‚Üí create_card
- "Comprei R$ 150 de roupa no cart√£o Nubank" ‚Üí create_card_purchase
- "Usei o cart√£o Inter para pagar 250 reais de combust√≠vel" ‚Üí create_card_purchase
- "Pagar fatura do cart√£o Nubank" ‚Üí pay_card_invoice
- "Quitar cart√£o Inter" ‚Üí pay_card_invoice
- **"Quais cart√µes tenho?" ‚Üí OBRIGATORIAMENTE usar a√ß√£o list_cards**
- **"Meus cart√µes" ‚Üí OBRIGATORIAMENTE usar a√ß√£o list_cards**
- **"Que cart√µes eu tenho?" ‚Üí OBRIGATORIAMENTE usar a√ß√£o list_cards**
- **"Cart√µes que tenho" ‚Üí OBRIGATORIAMENTE usar a√ß√£o list_cards**
- "Hist√≥rico do cart√£o Nubank" ‚Üí view_card_history
- "Compras do cart√£o Inter" ‚Üí view_card_history
`;
  }

  /**
   * ‚ö° Executar a√ß√µes determinadas pela IA
   */
  private async executeActions(analysis: any): Promise<AIAgentResponse> {
    const executedActions: AIAction[] = [];
    let mainMessage = analysis.response_message || "Processado com sucesso!";

    console.log('üîç Executando a√ß√µes:', analysis.actions);
    console.log('üìä Dados extra√≠dos:', analysis.extracted_data);

    for (const action of analysis.actions || []) {
      try {
        console.log(`üéØ Executando a√ß√£o ${action.type} com dados:`, analysis.extracted_data);
        const result = await this.executeAction(action, analysis.extracted_data);
        console.log(`‚úÖ Resultado da a√ß√£o ${action.type}:`, result);
        
        executedActions.push({
          ...action,
          executed: result.success
        });

        if (result.success && result.message) {
          mainMessage = result.message;
        }
      } catch (error) {
        console.error('‚ùå Erro ao executar a√ß√£o:', action.type, error);
        executedActions.push({
          ...action,
          executed: false
        });
      }
    }

    // Para consultas sem a√ß√µes (como listar contas), considerar sucesso se h√° uma resposta
    const hasExecutedActions = executedActions.some(a => a.executed);
    const isInformationalQuery = analysis.actions?.length === 0 && analysis.response_message;
    
    return {
      success: hasExecutedActions || isInformationalQuery,
      message: mainMessage,
      actions: executedActions,
      data: analysis.extracted_data,
      confidence: analysis.confidence || 0.8,
      reasoning: analysis.reasoning || "An√°lise conclu√≠da"
    };
  }

  /**
   * üéØ Executar a√ß√£o espec√≠fica
   */
  private async executeAction(action: AIAction, data: any): Promise<{success: boolean, message?: string}> {
    const context = this.userContext!;

    switch (action.type) {
      case 'create_transaction':
        return this.createTransaction(data);
      
      case 'create_category':
        return this.createCategory(data);
      
      case 'create_goal':
        return this.createGoal(data);
      
      case 'update_goal':
        return this.updateGoal(data);
      
      case 'create_bill':
        return this.createBill(data);
      
      case 'update_bill':
        return this.updateBill(data);
      
      case 'delete_bill':
        return this.deleteBill(data);
      
      case 'pay_bill':
        return this.payBill(data);
      
      case 'list_bills':
        return this.listBills(data);
      
      case 'create_card':
        return this.createCard(data);
      
      case 'create_card_purchase':
        return this.createCardPurchase(data);
      
      case 'pay_card_invoice':
        return this.payCardInvoice(data);
      
      case 'list_cards':
        return this.listCards(data);
      
      case 'view_card_history':
        return this.viewCardHistory(data);
      
      case 'financial_advice':
        return this.generateAdvice(data);
      
      default:
        return { success: false, message: 'A√ß√£o n√£o reconhecida' };
    }
  }

  /**
   * üí∞ Criar transa√ß√£o inteligentemente
   */
  private async createTransaction(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üí∞ createTransaction chamada com dados:', data);
      
      const context = this.userContext!;
      
      // Validar dados obrigat√≥rios
      if (!data.amount || data.amount <= 0) {
        console.log('‚ùå Amount inv√°lido:', data.amount);
        return {
          success: false,
          message: '‚ùå Valor da transa√ß√£o √© obrigat√≥rio e deve ser maior que zero.'
        };
      }
      
      if (!data.description && !data.category) {
        console.log('‚ùå Descri√ß√£o e categoria n√£o fornecidas');
        return {
          success: false,
          message: '‚ùå Descri√ß√£o ou categoria da transa√ß√£o √© obrigat√≥ria.'
        };
      }
      
      console.log('‚úÖ Dados validados, processando transa√ß√£o...');
      
      // Encontrar ou criar categoria
      let categoryId = null;
      if (data.category) {
        const existingCategory = context.categories.find(c => 
          c.name.toLowerCase().includes(data.category.toLowerCase()) && c.type === data.type
        );
        
        if (existingCategory) {
          categoryId = existingCategory.id;
        } else {
          // Criar categoria automaticamente
          const { data: newCategory } = await supabase
            .from('categories')
            .insert({
              user_id: context.userId,
              name: data.category,
              type: data.type,
              budget: data.type === 'expense' ? (data.amount * 10) : 0, // Budget inteligente
              color: this.getRandomColor(),
              icon: this.getCategoryIcon(data.category)
            })
            .select()
            .single();
          
          if (newCategory) {
            categoryId = newCategory.id;
          }
        }
      }

      // Determinar tipo da transa√ß√£o se n√£o especificado
      let transactionType = data.type;
      if (!transactionType) {
        // Se n√£o especificou tipo, assumir expense por padr√£o
        transactionType = 'expense';
        console.log('‚ö†Ô∏è Tipo n√£o especificado, usando expense como padr√£o');
      }
      
      console.log('üîÑ Tipo da transa√ß√£o:', transactionType);
      
      const transactionData = {
        user_id: context.userId,
        category_id: categoryId,
        description: data.description || 'Transa√ß√£o via IA',
        amount: transactionType === 'expense' ? -Math.abs(data.amount) : Math.abs(data.amount),
        type: transactionType,
        payment_method: data.payment_method || 'cash',
        status: 'completed',
        transaction_date: new Date().toISOString()
      };
      
      console.log('üíæ Criando transa√ß√£o no banco:', transactionData);
      
      // Criar transa√ß√£o
      const { error } = await supabase
        .from('transactions')
        .insert(transactionData);

      if (error) {
        console.error('‚ùå Erro do Supabase ao criar transa√ß√£o:', error);
        throw error;
      }
      
      console.log('‚úÖ Transa√ß√£o criada com sucesso');

      const emoji = transactionType === 'income' ? 'üí∞' : 'üí∏';
      const successMessage = `${emoji} Transa√ß√£o criada: ${data.description || 'Transa√ß√£o via IA'} - R$ ${Math.abs(data.amount).toFixed(2)}\nüìÇ Categoria: ${data.category || 'Geral'}`;
      console.log('üì§ Retornando sucesso:', successMessage);
      
      return {
        success: true,
        message: successMessage
      };
    } catch (error) {
      console.error('‚ùå Erro detalhado ao criar transa√ß√£o:', error);
      const errorMessage = `‚ùå Erro ao criar transa√ß√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}`;
      console.log('üì§ Retornando erro de transa√ß√£o:', errorMessage);
      return { 
        success: false, 
        message: errorMessage
      };
    }
  }

  /**
   * üè∑Ô∏è Criar categoria automaticamente
   */
  private async createCategory(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üè∑Ô∏è createCategory chamada com dados:', data);
      
      // Validar dados obrigat√≥rios - aceitar tanto 'name' quanto 'category'
      const categoryName = data.name || data.category;
      if (!categoryName) {
        console.log('‚ùå Nome da categoria n√£o fornecido');
        return { 
          success: false, 
          message: '‚ùå Nome da categoria √© obrigat√≥rio para criar uma categoria.' 
        };
      }
      
      console.log('‚úÖ Nome da categoria encontrado:', categoryName);

      // Se o tipo n√£o foi especificado, tentar detectar automaticamente
      let categoryType = data.type;
      console.log('üîç Tipo inicial da categoria:', categoryType);
      
      if (!categoryType) {
        const detectedType = this.detectObviousCategoryType(categoryName);
        if (detectedType) {
          categoryType = detectedType;
          console.log(`‚úÖ Tipo detectado automaticamente para "${categoryName}": ${detectedType}`);
        } else {
          // Se n√£o conseguir detectar, usar 'expense' como padr√£o
          categoryType = 'expense';
          console.log(`‚ö†Ô∏è Tipo n√£o detectado para "${categoryName}", usando 'expense' como padr√£o`);
        }
      }

      const categoryData = {
        user_id: this.userContext!.userId,
        name: categoryName,
        type: categoryType,
        budget: data.budget || (categoryType === 'income' ? 0 : 500),
        color: data.color || this.getRandomColor(),
        icon: data.icon || this.getCategoryIcon(categoryName)
      };

      console.log('üíæ Criando categoria no banco:', categoryData);

      const { data: insertedData, error } = await supabase
        .from('categories')
        .insert(categoryData)
        .select();

      if (error) {
        console.error('‚ùå Erro do Supabase ao criar categoria:', error);
        throw error;
      }

      console.log('‚úÖ Categoria criada com sucesso:', insertedData);

      const typeText = categoryType === 'income' ? 'Receita' : 'Despesa';
      const budgetText = categoryType === 'income' ? 'sem or√ßamento' : `R$ ${categoryData.budget.toFixed(2)}`;

      const successMessage = `üè∑Ô∏è Categoria "${categoryName}" criada com sucesso!\nüí∞ ${typeText} - ${budgetText}\n${this.getCategoryIcon(categoryName)} √çcone aplicado automaticamente`;
      console.log('üì§ Retornando sucesso:', successMessage);

      return {
        success: true,
        message: successMessage
      };
    } catch (error) {
      console.error('‚ùå Erro detalhado ao criar categoria:', error);
      const errorMessage = `‚ùå Erro ao criar categoria: ${error instanceof Error ? error.message : 'Erro desconhecido'}`;
      console.log('üì§ Retornando erro:', errorMessage);
      return { 
        success: false, 
        message: errorMessage
      };
    }
  }

  /**
   * üéØ Criar meta financeira
   */
  private async createGoal(data: any): Promise<{success: boolean, message?: string}> {
    try {
      const { error } = await supabase
        .from('goals')
        .insert({
          user_id: this.userContext!.userId,
          title: data.title,
          description: data.description,
          target_amount: data.target_amount,
          current_amount: 0,
          target_date: data.target_date,
          status: 'active'
        });

      if (error) throw error;

      return {
        success: true,
        message: `üéØ Meta "${data.title}" criada! Objetivo: R$ ${data.target_amount.toFixed(2)}`
      };
    } catch (error) {
      return { success: false, message: 'Erro ao criar meta' };
    }
  }

  /**
   * üîÑ Atualizar meta financeira existente
   */
  private async updateGoal(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üîÑ updateGoal chamada com dados:', data);
      
      const context = this.userContext!;
      
      // Se n√£o especificou qual meta, tentar encontrar a meta mais recente ou ativa
      let goalToUpdate = null;
      
      if (data.goal_id || data.id) {
        // Se especificou ID da meta
        const goalId = data.goal_id || data.id;
        goalToUpdate = context.goals.find(g => g.id === goalId);
      } else if (data.title || data.name) {
        // Se especificou t√≠tulo da meta
        const searchTerm = (data.title || data.name).toLowerCase();
        goalToUpdate = context.goals.find(g => 
          g.title.toLowerCase().includes(searchTerm) ||
          searchTerm.includes(g.title.toLowerCase())
        );
      } else {
        // Buscar a meta mais recente ativa
        goalToUpdate = context.goals
          .filter(g => g.status === 'active')
          .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];
      }
      
      if (!goalToUpdate) {
        return {
          success: false,
          message: '‚ùå Nenhuma meta encontrada para atualizar. Especifique qual meta ou crie uma nova meta primeiro.'
        };
      }
      
      console.log('üéØ Meta encontrada para atualizar:', goalToUpdate);
      
      // Preparar dados de atualiza√ß√£o
      const updateData: any = {};
      
      if (data.target_amount !== undefined) {
        updateData.target_amount = data.target_amount;
      }
      
      if (data.title && data.title !== goalToUpdate.title) {
        updateData.title = data.title;
      }
      
      if (data.description !== undefined) {
        updateData.description = data.description;
      }
      
      if (data.target_date !== undefined) {
        updateData.target_date = data.target_date;
      }
      
      if (data.current_amount !== undefined) {
        updateData.current_amount = data.current_amount;
      }
      
      // Se for aporte, adicionar ao valor atual
      if (data.aporte !== undefined) {
        updateData.current_amount = (goalToUpdate.current_amount || 0) + data.aporte;
      }
      
      console.log('üíæ Atualizando meta com dados:', updateData);
      
      const { error } = await supabase
        .from('goals')
        .update(updateData)
        .eq('id', goalToUpdate.id)
        .eq('user_id', context.userId);
      
      if (error) {
        console.error('‚ùå Erro do Supabase ao atualizar meta:', error);
        throw error;
      }
      
      console.log('‚úÖ Meta atualizada com sucesso');
      
      // Construir mensagem de sucesso
      let successMessage = `üéØ Meta "${goalToUpdate.title}" atualizada com sucesso!\n`;
      
      if (data.target_amount !== undefined) {
        successMessage += `üí∞ Novo objetivo: R$ ${data.target_amount.toFixed(2)}\n`;
      }
      
      if (data.current_amount !== undefined) {
        successMessage += `üìà Valor atual: R$ ${data.current_amount.toFixed(2)}\n`;
      }
      
      if (data.aporte !== undefined) {
        successMessage += `üí∞ Aporte de R$ ${data.aporte.toFixed(2)} adicionado!\nüìà Novo progresso: R$ ${updateData.current_amount.toFixed(2)}\n`;
      }
      
      const newTarget = data.target_amount || goalToUpdate.target_amount;
      const newCurrent = updateData.current_amount || data.current_amount || goalToUpdate.current_amount;
      const progress = newTarget > 0 ? (newCurrent / newTarget) * 100 : 0;
      
      successMessage += `üìä Progresso: ${progress.toFixed(1)}%`;
      
      console.log('üì§ Retornando sucesso:', successMessage);
      
      return {
        success: true,
        message: successMessage
      };
      
    } catch (error) {
      console.error('‚ùå Erro detalhado ao atualizar meta:', error);
      const errorMessage = `‚ùå Erro ao atualizar meta: ${error instanceof Error ? error.message : 'Erro desconhecido'}`;
      console.log('üì§ Retornando erro:', errorMessage);
      return { 
        success: false, 
        message: errorMessage
      };
    }
  }

  /**
   * üìÑ Criar nova conta a pagar/receber
   */
  private async createBill(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üìÑ createBill chamada com dados:', data);
      
      const context = this.userContext!;
      
      // Validar dados obrigat√≥rios
      if (!data.title && !data.name) {
        console.log('‚ùå Nome/t√≠tulo da conta n√£o fornecido');
        return {
          success: false,
          message: '‚ùå Nome da conta √© obrigat√≥rio para criar uma conta.'
        };
      }
      
      if (!data.amount || data.amount <= 0) {
        console.log('‚ùå Amount inv√°lido:', data.amount);
        return {
          success: false,
          message: '‚ùå Valor da conta √© obrigat√≥rio e deve ser maior que zero.\n\nüí° Exemplo: "Crie uma conta de luz de R$ 250 que vence todo dia 10"'
        };
      }
      
      const billTitle = data.title || data.name;
      
      // Determinar tipo da conta (payable ou receivable)
      let billType = data.type || 'payable'; // Padr√£o: conta a pagar
      if (data.bill_type) {
        billType = data.bill_type;
      }
      
      // Calcular data de vencimento
      let dueDate = new Date();
      if (data.due_date) {
        dueDate = new Date(data.due_date);
      } else if (data.due_day) {
        // Se especificou dia do vencimento (ex: todo dia 10)
        dueDate = new Date();
        dueDate.setDate(data.due_day);
        
        // Se o dia j√° passou neste m√™s, pr√≥ximo m√™s
        if (dueDate < new Date()) {
          dueDate.setMonth(dueDate.getMonth() + 1);
        }
      } else {
        // Padr√£o: vence em 30 dias
        dueDate.setDate(dueDate.getDate() + 30);
      }
      
      // Determinar se √© recorrente
      const isRecurring = data.recurring !== false; // Padr√£o: true para contas mensais
      
      const billData = {
        user_id: context.userId,
        title: billTitle,
        description: data.description || `Conta ${billType === 'payable' ? 'a pagar' : 'a receber'}: ${billTitle}`,
        amount: data.amount,
        type: billType,
        due_date: dueDate.toISOString().split('T')[0], // Apenas a data, sem hora
        status: 'pending',
        is_recurring: isRecurring,
        recurring_interval: data.recurring_interval || 'monthly',
        recurring_day: data.due_day || dueDate.getDate()
      };
      
      console.log('üíæ Criando conta no banco:', billData);
      
      const { data: insertedData, error } = await supabase
        .from('bills')
        .insert(billData)
        .select();
      
      if (error) {
        console.error('‚ùå Erro do Supabase ao criar conta:', error);
        throw error;
      }
      
      console.log('‚úÖ Conta criada com sucesso:', insertedData);
      
      const typeText = billType === 'payable' ? 'a pagar' : 'a receber';
      const recurringText = isRecurring ? ` (${data.recurring_interval || 'mensal'})` : '';
      
      const successMessage = `üìÑ Conta "${billTitle}" criada com sucesso!\nüí∞ ${typeText.charAt(0).toUpperCase() + typeText.slice(1)}: R$ ${data.amount.toFixed(2)}${recurringText}\nüìÖ Vencimento: ${dueDate.toLocaleDateString('pt-BR')}\n${isRecurring ? `üîÑ Conta recorrente (${data.recurring_interval || 'mensal'}) - dia ${data.due_day || dueDate.getDate()}` : 'üìù Conta √∫nica'}`;
      
      console.log('üì§ Retornando sucesso:', successMessage);
      
      return {
        success: true,
        message: successMessage
      };
      
    } catch (error) {
      console.error('‚ùå Erro detalhado ao criar conta:', error);
      const errorMessage = `‚ùå Erro ao criar conta: ${error instanceof Error ? error.message : 'Erro desconhecido'}`;
      console.log('üì§ Retornando erro:', errorMessage);
      return {
        success: false,
        message: errorMessage
      };
    }
  }

  /**
   * üìù Atualizar conta existente
   */
  private async updateBill(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üìù updateBill chamada com dados:', data);
      
      const context = this.userContext!;
      
      // Encontrar conta para atualizar
      let billToUpdate = null;
      
      if (data.id) {
        billToUpdate = context.bills.find(b => b.id === data.id);
      } else if (data.old_name || data.current_name) {
        const searchName = data.old_name || data.current_name;
        billToUpdate = context.bills.find(b => 
          b.title.toLowerCase().includes(searchName.toLowerCase())
        );
      } else if (data.title || data.name) {
        // Buscar por similaridade no nome
        billToUpdate = context.bills.find(b => 
          b.title.toLowerCase().includes((data.title || data.name).toLowerCase())
        );
      }
      
      if (!billToUpdate) {
        return {
          success: false,
          message: '‚ùå Conta n√£o encontrada para atualizar.'
        };
      }
      
      // Preparar dados para atualiza√ß√£o
      const updateData: any = {};
      
      if (data.title || data.new_name) {
        updateData.title = data.title || data.new_name;
      }
      if (data.amount && data.amount > 0) {
        updateData.amount = data.amount;
      }
      if (data.due_date) {
        updateData.due_date = data.due_date;
      }
      if (data.due_day) {
        updateData.due_date = `2024-${String(new Date().getMonth() + 1).padStart(2, '0')}-${String(data.due_day).padStart(2, '0')}`;
      }
      
      console.log('üìù Atualizando conta:', billToUpdate.id, updateData);
      
      const { error } = await supabase
        .from('bills')
        .update(updateData)
        .eq('id', billToUpdate.id)
        .eq('user_id', context.userId);
      
      if (error) {
        console.error('‚ùå Erro ao atualizar conta:', error);
        throw new Error(`Erro ao atualizar conta: ${error.message}`);
      }
      
      const updatedName = updateData.title || billToUpdate.title;
      const successMessage = `‚úÖ Conta "${updatedName}" atualizada com sucesso!`;
      
      console.log('üì§ Retornando sucesso:', successMessage);
      
      return {
        success: true,
        message: successMessage
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar conta:', error);
      return {
        success: false,
        message: `‚ùå Erro ao atualizar conta: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
      };
    }
  }

  /**
   * üóëÔ∏è Excluir conta
   */
  private async deleteBill(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üóëÔ∏è deleteBill chamada com dados:', data);
      
      const context = this.userContext!;
      
      // Encontrar conta para excluir
      let billToDelete = null;
      
      if (data.id) {
        billToDelete = context.bills.find(b => b.id === data.id);
      } else if (data.title || data.name) {
        const searchName = (data.title || data.name).toLowerCase();
        billToDelete = context.bills.find(b => 
          b.title.toLowerCase().includes(searchName) ||
          b.title.toLowerCase() === searchName
        );
      }
      
      if (!billToDelete) {
        return {
          success: false,
          message: `‚ùå Conta "${data.title || data.name || 'especificada'}" n√£o encontrada para exclus√£o.`
        };
      }
      
      console.log('üóëÔ∏è Excluindo conta:', billToDelete.id, billToDelete.title);
      
      const { error } = await supabase
        .from('bills')
        .delete()
        .eq('id', billToDelete.id)
        .eq('user_id', context.userId);
      
      if (error) {
        console.error('‚ùå Erro ao excluir conta:', error);
        throw new Error(`Erro ao excluir conta: ${error.message}`);
      }
      
      const successMessage = `üóëÔ∏è Conta "${billToDelete.title}" exclu√≠da com sucesso!`;
      
      console.log('üì§ Retornando sucesso:', successMessage);
      
      return {
        success: true,
        message: successMessage
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao excluir conta:', error);
      return {
        success: false,
        message: `‚ùå Erro ao excluir conta: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
      };
    }
  }

  /**
   * üí≥ Marcar conta como paga E criar transa√ß√£o automaticamente
   */
  private async payBill(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üí≥ payBill chamada com dados:', data);
      
      const context = this.userContext!;
      
      // Encontrar conta(s) para pagar
      let billsToPay = [];
      
      if (data.bill_id || data.id) {
        // Pagar conta espec√≠fica por ID
        const bill = context.bills.find(b => b.id === (data.bill_id || data.id) && b.status === 'pending');
        if (bill) billsToPay.push(bill);
      } else if (data.title || data.name) {
        // Pagar conta espec√≠fica por nome
        const bill = context.bills.find(b => 
          b.title.toLowerCase().includes((data.title || data.name).toLowerCase()) && 
          b.status === 'pending'
        );
        if (bill) billsToPay.push(bill);
      } else if (data.pay_all === true || data.all === true) {
        // Pagar todas as contas pendentes
        billsToPay = context.bills.filter(b => b.status === 'pending');
      } else {
        // Se n√£o especificou, tentar encontrar a conta mais pr√≥xima do vencimento
        billsToPay = context.bills
          .filter(b => b.status === 'pending')
          .sort((a, b) => new Date(a.due_date).getTime() - new Date(b.due_date).getTime())
          .slice(0, 1);
      }
      
      if (billsToPay.length === 0) {
        return {
          success: false,
          message: '‚ùå Nenhuma conta pendente encontrada para pagamento.'
        };
      }
      
      console.log('üí∞ Contas para pagar:', billsToPay);
      
      // PARA CADA CONTA: 1. Marcar como paga 2. Criar transa√ß√£o correspondente
      const processedBills = [];
      
      for (const bill of billsToPay) {
        console.log(`üîÑ Processando conta: ${bill.title}`);
        
        // 1. Marcar conta como paga
        const { error: billError } = await supabase
          .from('bills')
          .update({ 
            status: 'paid',
            updated_at: new Date().toISOString()
          })
          .eq('id', bill.id)
          .eq('user_id', context.userId);
          
        if (billError) {
          console.error(`‚ùå Erro ao marcar conta ${bill.title} como paga:`, billError);
          throw new Error(`Erro ao atualizar conta ${bill.title}: ${billError.message}`);
        }
        
        // 2. Criar transa√ß√£o correspondente
        const transactionType = bill.type === 'payable' ? 'expense' : 'income';
        const transactionAmount = bill.type === 'payable' ? -Math.abs(bill.amount) : Math.abs(bill.amount);
        
        // Buscar categoria apropriada ou usar uma padr√£o
        let categoryId = bill.category_id;
        if (!categoryId) {
          // Buscar categoria "Outros" do tipo correto
          const defaultCategory = context.categories.find(c => 
            c.type === transactionType && c.name.toLowerCase().includes('outros')
          );
          categoryId = defaultCategory?.id || null;
        }
        
        const transactionData = {
          user_id: context.userId,
          category_id: categoryId,
          description: `Pagamento: ${bill.title}`,
          amount: transactionAmount,
          type: transactionType,
          status: 'completed',
          transaction_date: new Date().toISOString().split('T')[0],
          payment_method: 'transfer' // M√©todo padr√£o
        };
        
        console.log(`üí∞ Criando transa√ß√£o para ${bill.title}:`, transactionData);
        
        const { data: transaction, error: transactionError } = await supabase
          .from('transactions')
          .insert([transactionData])
          .select()
          .single();
          
        if (transactionError) {
          console.error(`‚ùå Erro ao criar transa√ß√£o para ${bill.title}:`, transactionError);
          throw new Error(`Erro ao criar transa√ß√£o para ${bill.title}: ${transactionError.message}`);
        }
        
        console.log(`‚úÖ Transa√ß√£o criada para ${bill.title}:`, transaction.id);
        processedBills.push({ bill, transaction });
      }
      
      console.log('‚úÖ Todas as contas processadas com sucesso');
      
      // Construir mensagem de sucesso
      let successMessage = '';
      
      if (processedBills.length === 1) {
        const { bill, transaction } = processedBills[0];
        const typeText = bill.type === 'payable' ? 'Despesa' : 'Receita';
        successMessage = `üí≥ Conta "${bill.title}" marcada como paga!\nüí∞ Valor: R$ ${bill.amount.toFixed(2)}\nüìä ${typeText} registrada no Dashboard e Transa√ß√µes`;
      } else {
        const totalAmount = processedBills.reduce((sum, { bill }) => sum + bill.amount, 0);
        successMessage = `üí≥ ${processedBills.length} contas marcadas como pagas!\nüí∞ Total: R$ ${totalAmount.toFixed(2)}\nüìä Todas as transa√ß√µes registradas\n\nüìã Contas processadas:\n`;
        processedBills.forEach(({ bill }) => {
          const typeText = bill.type === 'payable' ? 'üí∏' : 'üí∞';
          successMessage += `${typeText} ${bill.title} - R$ ${bill.amount.toFixed(2)}\n`;
        });
      }
      
      console.log('üì§ Retornando sucesso:', successMessage);
      
      return {
        success: true,
        message: successMessage
      };
      
    } catch (error) {
      console.error('‚ùå Erro detalhado ao pagar conta:', error);
      const errorMessage = `‚ùå Erro ao pagar conta: ${error instanceof Error ? error.message : 'Erro desconhecido'}`;
      console.log('üì§ Retornando erro:', errorMessage);
      return { 
        success: false, 
        message: errorMessage
      };
    }
  }

  /**
   * üìã Listar contas pendentes organizadas
   */
  private async listBills(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üìã listBills chamada com dados:', data);
      
      const context = this.userContext!;
      
      // Log das contas carregadas para debug
      console.log('üîç Total de contas carregadas:', context.bills.length);
      console.log('üìä Status das contas:', context.bills.map(b => ({ title: b.title, status: b.status })));
      
      // Filtrar apenas contas N√ÉO conclu√≠das (pendentes, atrasadas, etc - mas n√£o pagas)
      const activeBills = context.bills.filter(b => b.status !== 'paid' && b.status !== 'cancelled');
      
      console.log('‚úÖ Contas ativas ap√≥s filtro:', activeBills.length);
      console.log('üìã Contas ativas:', activeBills.map(b => ({ title: b.title, status: b.status, type: b.type })));
      
      if (activeBills.length === 0) {
        return {
          success: true,
          message: '‚úÖ Parab√©ns! Voc√™ n√£o tem contas pendentes no momento.'
        };
      }
      
      // Separar por tipo (a pagar vs a receber)
      const billsToPay = activeBills.filter(b => b.type === 'payable');
      const billsToReceive = activeBills.filter(b => b.type === 'receivable');
      
      let message = `üìã **SUAS CONTAS PENDENTES:**\n\n`;
      
      // ===== CONTAS A PAGAR =====
      if (billsToPay.length > 0) {
        // Separar por recorr√™ncia
        const uniquePayable = billsToPay.filter(b => !b.is_recurring);
        const recurringPayable = billsToPay.filter(b => b.is_recurring);
        
        message += `üí∏ **CONTAS A PAGAR (${billsToPay.length}):**\n\n`;
        
        // Contas √∫nicas a pagar
        if (uniquePayable.length > 0) {
          message += `üìÑ **Contas √önicas (${uniquePayable.length}):**\n`;
          
          const sortedUnique = uniquePayable.sort((a, b) => 
            new Date(a.due_date).getTime() - new Date(b.due_date).getTime()
          );
          
          sortedUnique.forEach((bill) => {
            const formatBill = this.formatBillInfo(bill);
            message += `${formatBill.icon} ${bill.title} - R$ ${bill.amount.toFixed(2)}${formatBill.urgency}\n`;
          });
          
          const totalUnique = uniquePayable.reduce((sum, bill) => sum + bill.amount, 0);
          message += `üí∞ Subtotal √∫nico: R$ ${totalUnique.toFixed(2)}\n\n`;
        }
        
        // Contas recorrentes a pagar
        if (recurringPayable.length > 0) {
          message += `üîÑ **Contas Recorrentes (${recurringPayable.length}):**\n`;
          
          const sortedRecurring = recurringPayable.sort((a, b) => 
            new Date(a.due_date).getTime() - new Date(b.due_date).getTime()
          );
          
          sortedRecurring.forEach((bill) => {
            const formatBill = this.formatBillInfo(bill);
            const intervalText = this.getRecurringIntervalText(bill.recurring_interval);
            message += `${formatBill.icon} ${bill.title} - R$ ${bill.amount.toFixed(2)} (${intervalText})${formatBill.urgency}\n`;
          });
          
          const totalRecurring = recurringPayable.reduce((sum, bill) => sum + bill.amount, 0);
          message += `üí∞ Subtotal recorrente: R$ ${totalRecurring.toFixed(2)}\n\n`;
        }
        
        const totalToPay = billsToPay.reduce((sum, bill) => sum + bill.amount, 0);
        message += `üí∏ **TOTAL A PAGAR: R$ ${totalToPay.toFixed(2)}**\n\n`;
      }
      
      // ===== CONTAS A RECEBER =====
      if (billsToReceive.length > 0) {
        // Separar por recorr√™ncia
        const uniqueReceivable = billsToReceive.filter(b => !b.is_recurring);
        const recurringReceivable = billsToReceive.filter(b => b.is_recurring);
        
        message += `üí∞ **CONTAS A RECEBER (${billsToReceive.length}):**\n\n`;
        
        // Contas √∫nicas a receber
        if (uniqueReceivable.length > 0) {
          message += `üìÑ **Recebimentos √önicos (${uniqueReceivable.length}):**\n`;
          
          const sortedUnique = uniqueReceivable.sort((a, b) => 
            new Date(a.due_date).getTime() - new Date(b.due_date).getTime()
          );
          
          sortedUnique.forEach((bill) => {
            const formatBill = this.formatBillInfo(bill);
            message += `${formatBill.icon} ${bill.title} - R$ ${bill.amount.toFixed(2)}${formatBill.urgency}\n`;
          });
          
          const totalUnique = uniqueReceivable.reduce((sum, bill) => sum + bill.amount, 0);
          message += `üí∞ Subtotal √∫nico: R$ ${totalUnique.toFixed(2)}\n\n`;
        }
        
        // Contas recorrentes a receber
        if (recurringReceivable.length > 0) {
          message += `üîÑ **Recebimentos Recorrentes (${recurringReceivable.length}):**\n`;
          
          const sortedRecurring = recurringReceivable.sort((a, b) => 
            new Date(a.due_date).getTime() - new Date(b.due_date).getTime()
          );
          
          sortedRecurring.forEach((bill) => {
            const formatBill = this.formatBillInfo(bill);
            const intervalText = this.getRecurringIntervalText(bill.recurring_interval);
            message += `${formatBill.icon} ${bill.title} - R$ ${bill.amount.toFixed(2)} (${intervalText})${formatBill.urgency}\n`;
          });
          
          const totalRecurring = recurringReceivable.reduce((sum, bill) => sum + bill.amount, 0);
          message += `üí∞ Subtotal recorrente: R$ ${totalRecurring.toFixed(2)}\n\n`;
        }
        
        const totalToReceive = billsToReceive.reduce((sum, bill) => sum + bill.amount, 0);
        message += `üí∞ **TOTAL A RECEBER: R$ ${totalToReceive.toFixed(2)}**\n\n`;
      }
      
      message += `üí° **Dicas:**\n‚Ä¢ "pagar conta [nome]" - marca como paga\n‚Ä¢ "criar conta fixa" - adiciona conta recorrente`;
      
      console.log('üì§ Retornando lista de contas organizadas:', message);
      
      return {
        success: true,
        message: message
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao listar contas:', error);
      return { 
        success: false, 
        message: `‚ùå Erro ao listar contas: ${error instanceof Error ? error.message : 'Erro desconhecido'}` 
      };
    }
  }

  /**
   * üé® Formatar informa√ß√µes da conta (urg√™ncia, √≠cones)
   */
  private formatBillInfo(bill: any): { icon: string; urgency: string } {
    const dueDate = new Date(bill.due_date);
    const today = new Date();
    const diffDays = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    
    let urgencyIcon = 'üìÖ';
    let urgencyText = '';
    
    if (diffDays < 0) {
      urgencyIcon = 'üî¥';
      urgencyText = ` (${Math.abs(diffDays)} dias atrasada!)`;
    } else if (diffDays <= 3) {
      urgencyIcon = 'üü°';
      urgencyText = ` (vence em ${diffDays} dias)`;
    } else if (diffDays <= 7) {
      urgencyIcon = 'üü†';
      urgencyText = ` (vence em ${diffDays} dias)`;
    } else {
      urgencyText = ` (vence em ${diffDays} dias)`;
    }
    
    return {
      icon: urgencyIcon,
      urgency: urgencyText
    };
  }

  /**
   * üìÖ Obter texto do intervalo de recorr√™ncia
   */
  private getRecurringIntervalText(interval: string | null): string {
    switch (interval) {
      case 'daily': return 'di√°rio';
      case 'weekly': return 'semanal';
      case 'monthly': return 'mensal';
      case 'yearly': return 'anual';
      default: return 'recorrente';
    }
  }

  /**
   * üßπ Limpar contexto do usu√°rio (para logout/troca de usu√°rio)
   */
  public clearUserContext(): void {
    console.log('üßπ Limpando contexto do usu√°rio na IA...');
    this.userContext = null;
    this.conversationHistory = [];
    console.log('‚úÖ Contexto da IA limpo');
  }

  /**
   * üí° Gerar conselho financeiro
   */
  private async generateAdvice(data: any): Promise<{success: boolean, message?: string}> {
    const context = this.userContext!;
    const savings = context.monthlyIncome - context.monthlyExpenses;
    
    let advice = "üí° An√°lise Financeira:\n\n";
    
    if (savings > 0) {
      advice += `‚úÖ Voc√™ est√° economizando R$ ${savings.toFixed(2)} por m√™s!\n`;
      advice += "üéØ Sugest√£o: Considere criar uma meta de investimento.";
    } else {
      advice += `‚ö†Ô∏è Voc√™ est√° gastando R$ ${Math.abs(savings).toFixed(2)} a mais que ganha.\n`;
      advice += "üìä Sugest√£o: Revise suas despesas nas principais categorias.";
    }

    return { success: true, message: advice };
  }

  /**
   * üé® Utilit√°rios para cores e √≠cones
   */
  private getRandomColor(): string {
    const colors = ['#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6', '#EC4899'];
    return colors[Math.floor(Math.random() * colors.length)];
  }

  /**
   * üí≥ Criar cart√£o de cr√©dito
   */
  private async createCard(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üí≥ createCard chamada com dados:', data);
      
      const context = this.userContext!;
      
      // Validar dados obrigat√≥rios
      if (!data.nickname) {
        return {
          success: false,
          message: '‚ùå Nome do cart√£o √© obrigat√≥rio.'
        };
      }
      
      if (!data.due_day || data.due_day < 1 || data.due_day > 31) {
        return {
          success: false,
          message: '‚ùå Dia de vencimento deve estar entre 1 e 31.'
        };
      }
      
      const { data: card, error } = await supabase
        .from('cards')
        .insert({
          user_id: context.userId,
          nickname: data.nickname,
          due_day: data.due_day,
          limit_amount: data.limit_amount || null
        })
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå Erro ao criar cart√£o:', error);
        throw new Error(`Erro ao criar cart√£o: ${error.message}`);
      }
      
      return {
        success: true,
        message: `üí≥ Cart√£o "${data.nickname}" criado com sucesso! Vencimento dia ${data.due_day}${data.limit_amount ? `, limite de R$ ${data.limit_amount.toFixed(2)}` : ''}.`
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao criar cart√£o:', error);
      return {
        success: false,
        message: `‚ùå Erro ao criar cart√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
      };
    }
  }

  /**
   * üõçÔ∏è Criar compra no cart√£o de cr√©dito
   */
  private async createCardPurchase(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üõçÔ∏è createCardPurchase chamada com dados:', data);
      
      const context = this.userContext!;
      
      // Validar dados obrigat√≥rios
      if (!data.card_id && !data.card_name) {
        return {
          success: false,
          message: '‚ùå Cart√£o deve ser especificado.'
        };
      }
      
      if (!data.amount || data.amount <= 0) {
        return {
          success: false,
          message: '‚ùå Valor da compra √© obrigat√≥rio e deve ser maior que zero.'
        };
      }
      
      if (!data.description) {
        return {
          success: false,
          message: '‚ùå Descri√ß√£o da compra √© obrigat√≥ria.'
        };
      }
      
      // Encontrar cart√£o
      let cardId = data.card_id;
      if (!cardId && data.card_name) {
        const card = context.cards.find(c => 
          c.nickname.toLowerCase().includes(data.card_name.toLowerCase())
        );
        if (!card) {
          return {
            success: false,
            message: `‚ùå Cart√£o "${data.card_name}" n√£o encontrado.`
          };
        }
        cardId = card.id;
      }
      
      // Encontrar categoria se especificada
      let categoryId = null;
      if (data.category) {
        const category = context.categories.find(c => 
          c.name.toLowerCase().includes(data.category.toLowerCase()) && c.type === 'expense'
        );
        categoryId = category?.id || null;
      }
      
      const { data: purchase, error } = await supabase
        .from('card_purchases')
        .insert({
          card_id: cardId,
          description: data.description,
          amount: data.amount,
          category_id: categoryId,
          purchase_date: data.purchase_date || new Date().toISOString().split('T')[0],
          installments: data.installments || 1,
          current_installment: 1
        })
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå Erro ao criar compra no cart√£o:', error);
        throw new Error(`Erro ao criar compra: ${error.message}`);
      }
      
      const installmentText = data.installments > 1 ? ` em ${data.installments}x` : '';
      return {
        success: true,
        message: `üõçÔ∏è Compra "${data.description}" de R$ ${data.amount.toFixed(2)}${installmentText} registrada no cart√£o!`
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao criar compra no cart√£o:', error);
      return {
        success: false,
        message: `‚ùå Erro ao criar compra: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
      };
    }
  }

  /**
   * üí∏ Pagar fatura do cart√£o
   */
  private async payCardInvoice(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üí∏ payCardInvoice chamada com dados:', data);
      
      const context = this.userContext!;
      
      // Encontrar cart√£o
      let cardToPay = null;
      
      if (data.card_id) {
        cardToPay = context.cards.find(c => c.id === data.card_id);
      } else if (data.card_name) {
        cardToPay = context.cards.find(c => 
          c.nickname.toLowerCase().includes(data.card_name.toLowerCase())
        );
      } else if (context.cards.length === 1) {
        cardToPay = context.cards[0];
      }
      
      if (!cardToPay) {
        return {
          success: false,
          message: '‚ùå Cart√£o n√£o encontrado. Especifique o nome ou ID do cart√£o.'
        };
      }
      
      // Buscar compras n√£o pagas do cart√£o
      const { data: purchases, error: purchasesError } = await supabase
        .from('card_purchases')
        .select('*')
        .eq('card_id', cardToPay.id)
        .eq('is_paid', false);
      
      if (purchasesError) {
        throw new Error(`Erro ao buscar compras: ${purchasesError.message}`);
      }
      
      if (!purchases || purchases.length === 0) {
        return {
          success: false,
          message: `üí≥ Cart√£o "${cardToPay.nickname}" n√£o possui compras pendentes para pagamento.`
        };
      }
      
      const totalAmount = purchases.reduce((sum, p) => sum + p.amount, 0);
      
      // Criar transa√ß√£o de pagamento
      const { data: transaction, error: transactionError } = await supabase
        .from('transactions')
        .insert({
          user_id: context.userId,
          amount: totalAmount,
          description: `Pagamento fatura cart√£o ${cardToPay.nickname}`,
          type: 'expense',
          transaction_date: new Date().toISOString().split('T')[0]
        })
        .select()
        .single();
      
      if (transactionError) {
        throw new Error(`Erro ao criar transa√ß√£o: ${transactionError.message}`);
      }
      
      // Marcar compras como pagas
      const { error: updateError } = await supabase
        .from('card_purchases')
        .update({ 
          is_paid: true,
          transaction_id: transaction.id 
        })
        .eq('card_id', cardToPay.id)
        .eq('is_paid', false);
      
      if (updateError) {
        throw new Error(`Erro ao atualizar compras: ${updateError.message}`);
      }
      
      return {
        success: true,
        message: `üí∏ Fatura do cart√£o "${cardToPay.nickname}" paga com sucesso!\nüí∞ Valor: R$ ${totalAmount.toFixed(2)}\nüìä ${purchases.length} compras quitadas`
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao pagar fatura do cart√£o:', error);
      return {
        success: false,
        message: `‚ùå Erro ao pagar fatura: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
      };
    }
  }

  /**
   * üí≥ Listar cart√µes do usu√°rio
   */
  private async listCards(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üí≥ listCards chamada com dados:', data);
      
      const context = this.userContext!;
      
      if (context.cards.length === 0) {
        return {
          success: true,
          message: 'üí≥ Voc√™ ainda n√£o possui cart√µes cadastrados.\n\nüí° Dica: "criar cart√£o Nubank dia 10" para adicionar um novo cart√£o.'
        };
      }
      
      let message = 'üí≥ **SEUS CART√ïES DE CR√âDITO**\n\n';
      
      for (const card of context.cards) {
        const pendingAmount = card.pending_amount || 0;
        const statusIcon = pendingAmount > 0 ? 'üî¥' : '‚úÖ';
        
        message += `${statusIcon} **${card.nickname}**\n`;
        message += `üìÖ Vencimento: dia ${card.due_day}\n`;
        message += `üí∞ Fatura atual: R$ ${pendingAmount.toFixed(2)}\n`;
        if (card.limit_amount) {
          message += `üí≥ Limite: R$ ${card.limit_amount.toFixed(2)}\n`;
        }
        message += `üõçÔ∏è Compras pendentes: ${card.pending_purchases || 0}\n\n`;
      }
      
      const totalPending = context.cards.reduce((sum, c) => sum + (c.pending_amount || 0), 0);
      if (totalPending > 0) {
        message += `üí∏ **TOTAL PENDENTE EM CART√ïES: R$ ${totalPending.toFixed(2)}**\n\n`;
      }
      
      message += `üí° **Dicas:**\n‚Ä¢ "compra no cart√£o [nome]" - registrar compra\n‚Ä¢ "pagar fatura [nome]" - quitar cart√£o`;
      
      return {
        success: true,
        message: message
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao listar cart√µes:', error);
      return {
        success: false,
        message: `‚ùå Erro ao listar cart√µes: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
      };
    }
  }

  /**
   * üìã Ver hist√≥rico de compras do cart√£o
   */
  private async viewCardHistory(data: any): Promise<{success: boolean, message?: string}> {
    try {
      console.log('üìã viewCardHistory chamada com dados:', data);
      
      const context = this.userContext!;
      
      // Encontrar cart√£o
      let targetCard = null;
      
      if (data.card_id) {
        targetCard = context.cards.find(c => c.id === data.card_id);
      } else if (data.card_name) {
        targetCard = context.cards.find(c => 
          c.nickname.toLowerCase().includes(data.card_name.toLowerCase())
        );
      } else if (context.cards.length === 1) {
        targetCard = context.cards[0];
      }
      
      if (!targetCard) {
        return {
          success: false,
          message: '‚ùå Cart√£o n√£o encontrado. Especifique o nome do cart√£o.'
        };
      }
      
      // Buscar hist√≥rico de compras
      const { data: purchases, error } = await supabase
        .from('card_purchases_with_details')
        .select('*')
        .eq('card_id', targetCard.id)
        .order('purchase_date', { ascending: false })
        .limit(20);
      
      if (error) {
        throw new Error(`Erro ao buscar hist√≥rico: ${error.message}`);
      }
      
      if (!purchases || purchases.length === 0) {
        return {
          success: true,
          message: `üìã Cart√£o "${targetCard.nickname}" ainda n√£o possui compras registradas.`
        };
      }
      
      let message = `üìã **HIST√ìRICO - CART√ÉO ${targetCard.nickname.toUpperCase()}**\n\n`;
      
      const unpaidPurchases = purchases.filter(p => !p.is_paid);
      const paidPurchases = purchases.filter(p => p.is_paid);
      
      if (unpaidPurchases.length > 0) {
        message += `üî¥ **FATURA ATUAL (${unpaidPurchases.length} compras)**\n`;
        const currentTotal = unpaidPurchases.reduce((sum, p) => sum + p.amount, 0);
        message += `üí∞ Total: R$ ${currentTotal.toFixed(2)}\n\n`;
        
        for (const purchase of unpaidPurchases.slice(0, 10)) {
          const date = new Date(purchase.purchase_date).toLocaleDateString('pt-BR');
          const installmentText = purchase.installments > 1 ? ` (${purchase.current_installment}/${purchase.installments}x)` : '';
          message += `‚Ä¢ ${purchase.description} - R$ ${purchase.amount.toFixed(2)}${installmentText}\n  üìÖ ${date}\n\n`;
        }
      }
      
      if (paidPurchases.length > 0) {
        message += `‚úÖ **COMPRAS PAGAS (√∫ltimas ${Math.min(paidPurchases.length, 5)})**\n`;
        
        for (const purchase of paidPurchases.slice(0, 5)) {
          const date = new Date(purchase.purchase_date).toLocaleDateString('pt-BR');
          message += `‚Ä¢ ${purchase.description} - R$ ${purchase.amount.toFixed(2)} ‚úÖ\n  üìÖ ${date}\n\n`;
        }
      }
      
      return {
        success: true,
        message: message
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar hist√≥rico do cart√£o:', error);
      return {
        success: false,
        message: `‚ùå Erro ao buscar hist√≥rico: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
      };
    }
  }

  /**
   * üîç Detectar automaticamente o tipo de categoria quando √≥bvio
   */
  private detectObviousCategoryType(categoryName: string): 'income' | 'expense' | null {
    const name = categoryName.toLowerCase();
    
    // Palavras-chave que indicam RECEITA claramente
    const incomeKeywords = [
      'sal√°rio', 'salario', 'freelance', 'freela', 'trabalho extra',
      'venda', 'vendas', 'comiss√£o', 'bonifica√ß√£o', 'pr√™mio',
      'aluguel recebido', 'dividendos', 'juros recebidos',
      'consultoria', 'honor√°rios', 'cach√™', 'renda extra',
      'monetiza√ß√£o', 'ads', 'publicidade', 'patroc√≠nio',
      'receita', 'receitas', 'ganho', 'ganhos', 'renda', 'rendas'
    ];
    
    // Palavras-chave que indicam DESPESA claramente
    const expenseKeywords = [
      'aluguel', 'financiamento', 'presta√ß√£o', 'conta de luz',
      'conta de √°gua', 'conta de g√°s', 'internet', 'telefone',
      'medicamentos', 'rem√©dios', 'plano de sa√∫de', 'seguro',
      'iptu', 'ipva', 'multa', 'taxa', 'anuidade',
      'mensalidade', 'matr√≠cula', 'pens√£o', 'combust√≠vel',
      'gasto', 'gastos', 'despesa', 'despesas', 'custo', 'custos',
      'pagamento', 'pagamentos', 'conta', 'contas'
    ];
    
    // Verificar se √© receita √≥bvia
    for (const keyword of incomeKeywords) {
      if (name.includes(keyword)) {
        return 'income';
      }
    }
    
    // Verificar se √© despesa √≥bvia
    for (const keyword of expenseKeywords) {
      if (name.includes(keyword)) {
        return 'expense';
      }
    }
    
    // Se n√£o for √≥bvio, retorna null (precisa perguntar)
    return null;
  }

  private getCategoryIcon(categoryName: string): string {
    const icons: { [key: string]: string } = {
      'alimenta√ß√£o': 'üçΩÔ∏è',
      'comida': 'üçΩÔ∏è',
      'mercado': 'üõí',
      'transporte': 'üöó',
      'uber': 'üöó',
      't√°xi': 'üöñ',
      '√¥nibus': 'üöå',
      'sa√∫de': 'üè•',
      'm√©dico': 'üë®‚Äç‚öïÔ∏è',
      'farm√°cia': 'üíä',
      'educa√ß√£o': 'üìö',
      'curso': 'üéì',
      'livro': 'üìñ',
      'lazer': 'üéÆ',
      'jogos': 'üéÆ',
      'jogo': 'üéÆ',
      'gaming': 'üéÆ',
      'entretenimento': 'üé¨',
      'cinema': 'üé¨',
      'netflix': 'üì∫',
      'casa': 'üè†',
      'moradia': 'üè†',
      'aluguel': 'üè†',
      'pets': 'üêï',
      'pet': 'üêï',
      'animal': 'üêæ',
      'cachorro': 'üêï',
      'gato': 'üê±',
      'investimentos': 'üìà',
      'investir': 'üí∞',
      'sal√°rio': 'üíº',
      'trabalho': 'üíº',
      'freelance': 'üíª',
      'roupas': 'üëï',
      'roupa': 'üëï',
      'vestu√°rio': 'üëî',
      'beleza': 'üíÑ',
      'cabeleireiro': '‚úÇÔ∏è',
      'esporte': '‚öΩ',
      'academia': 'üèãÔ∏è',
      'gym': 'üí™',
      'viagem': '‚úàÔ∏è',
      'hotel': 'üè®',
      'combust√≠vel': '‚õΩ',
      'gasolina': '‚õΩ',
      'telefone': 'üì±',
      'internet': 'üì∂',
      'supermercado': 'üõí'
    };
    
    const categoryLower = categoryName.toLowerCase();
    
    // Buscar por palavra-chave na categoria
    for (const [keyword, icon] of Object.entries(icons)) {
      if (categoryLower.includes(keyword)) {
        return icon;
      }
    }
    
    return 'üìÇ';
  }
}

// Inst√¢ncia singleton do agente
export const aiAgent = new AIFinancialAgent();

// Expor globalmente para logout seguro
if (typeof window !== 'undefined') {
  (window as any).aiAgent = aiAgent;
}